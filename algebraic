#different groups as isomorphic to 0,1,2,3,....(with 0 as the identity)
#for example the quaternion of order eight mapping is
#(0,1),(1,i),(2,-1),(3,-i),(4,j),(5,k),(6,-j),(7,-k)

def zahlen(n,x,y):#the cyclic groups.  the building blocks of all abelian groups
	return (x+y)%n

def dihedral(n,x,y):#these groups are degenerate.  can simply be reduced to tinier groups
	#works for d3 and d4-not proven, but I suspect it works for them all-symmetry.
	#remember nomenclature is |Dn|=2n
	if x<n:#top half
		if y>=n:return dihedral(n,x,y-n)+n
		else: return (x+y)%n#top left corner=base case=Zn
	else:return 2*n-1-dihedral(n,2*n-1-x,y)#x>=n. fold the peice of paper.  you on the bottom half

def groupOfPrimeSquared(p,x,y):#i.e. the non-cylic group of order 4,9,25,etc...
	return zahlen(p,x%p,y%p)+zahlen(p,x/p,y/p)*p

def quaternion(n,x,y):#this is VERY close to a dihedral group.  farm it out.
	#the only difference is the bottom right quadrant.
	#for peace of mind, the mapping is (0,1),(1,i),(2,-1),(3,-i),(4,j),(5,k),(6,-j),(7,-k)
	this = dihedral(4,x,y)
	if x<4 or y<4:return this
	else:
		if this<2:return this+2
		else:return this-2
		
def boolean(n,x,y):#the boolean groups (0,1,0,0,1,1) etc.....
	#done for size 8 first (this is not generalized yet)
	if x%2==y%2:return kleinFour(x/2,y/2)*2
	else: return kleinFour(x/2,y/2)*2+1
	
def kleinFour(x,y):#done by hand for fun-klein four is one of my favorite groups
	#first, we can deal with all cases that have input dealing with e or outputs giving e
	if x==0:return y
	elif y==0:return x
	elif x==y:return 0
	#left with 3 possibile outcomes, uniform distribution
	elif x!=1 and y!=1:return 1
	elif x!=2 and y!=2:return 2
	else: return 3
	
def groupOfPrimeSquared(p,x,y):#i.e. the non-cylic group of order 4,9,16,25,etc...
	return zahlen(p,x%p,y%p)+zahlen(p,x/p,y/p)*p

def directP(z1,z2,x,y):#as the direct product of only two cylic groups-put in the size of the cyclic groups
	#this would be easy enough simply to add the ordered pairs and return it, cause thats what the group is lol, but see if can stick with the single number theme
	#this works fine, but I have a sinking suspicion that there is a REALLY simple way to do this

	half=(z1*z2)/2
	if (x<half and y<half) or (x>=half and y>=half):return (x+y)%half
	else:return (x+y)%half + half
